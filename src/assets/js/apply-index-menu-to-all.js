// Apply Index Menu to All Pages - COINPAYOT NFT
// Script √°p d·ª•ng menu c·ªßa index.html cho t·∫•t c·∫£ c√°c trang c√≤n l·∫°i
console.log('üåê Apply Index Menu to All Pages loaded');

class ApplyIndexMenuToAll {
    constructor() {
        this.pages = [
            'game.html',
            'marketplace.html',
            'investment.html',
            'nft-investment.html',
            'blindbox.html',
            'collection.html',
            'creators.html',
            'profile.html',
            'referral.html',
            'signup.html',
            'whitepaper.html'
        ];
        this.init();
    }

    init() {
        console.log('üåê Initializing Apply Index Menu to All...');
        this.generateInstructions();
        this.checkCurrentPage();
        console.log('‚úÖ Apply Index Menu to All ready!');
    }

    generateInstructions() {
        console.log('üìã Instructions for applying index.html menu to all pages:');
        console.log('==========================================================');
        
        this.pages.forEach(page => {
            console.log(`\nüìÑ ${page}:`);
            console.log('1. Replace the entire header section with:');
            console.log(`
  <header id="header">
    <nav class="navbar navbar-expand-lg padding-small px-lg-4">
      <div class="container-fluid">

        <div class="main-logo position-relative">
          <a href="index.html">
            <img src="images/header-icon.png" alt="logo">
          </a>
          <!-- Hidden Admin Button - Triple click to access -->
          <button class="btn btn-dark btn-sm position-absolute" 
                  style="top: 5px; right: 5px; opacity: 0.2; transition: opacity 0.3s; z-index: 1000; font-size: 10px;" 
                  onmouseover="this.style.opacity='0.6'" 
                  onmouseout="this.style.opacity='0.2'"
                  onclick="handleAdminButtonClick()"
                  title="Admin Access (Triple Click)">
            <i class="fas fa-shield-alt"></i>
          </button>
        </div>

        <button class="navbar-toggler mb-0" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar"
          aria-controls="offcanvasNavbar">
          <img src="images/menu.png" alt="Menu" class="hamburger-menu" style="width: 24px; height: 24px;">
        </button>
        <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasNavbar" aria-labelledby="offcanvasNavbarLabel">
          <div class="offcanvas-header">
            <h5 class="offcanvas-title text-white" id="offcanvasNavbarLabel">Menu</h5>
            <button type="button" class="btn-close btn-close-white text-reset" data-bs-dismiss="offcanvas"
              aria-label="Close"></button>
          </div>
          <div class="offcanvas-body">
            <div class="main-menu text-center d-lg-flex align-items-center">
              <ul class="menu-list list-unstyled d-lg-flex m-0" id="optimizedMenu">
                <!-- Menu will be dynamically generated by unified-menu-system.js -->
              </ul>
            </div>
            <div class="btn-wrap d-flex my-4 my-lg-0">
              <!-- Connect button will be added by unified menu system -->
            </div>
          </div>
        </div>

      </div>
    </nav>
  </header>`);
            
            console.log('2. Add these scripts before </body>:');
            console.log('   <script src="js/unified-notification-system.js"></script>');
            console.log('   <script src="js/unified-menu-system.js"></script>');
            console.log('   <script src="js/apply-unified-menu-to-all.js"></script>');
            
            console.log('3. Remove any existing menu scripts like:');
            console.log('   - optimized-menu.js');
            console.log('   - test-menu.js');
            console.log('   - simple-menu.js');
            console.log('   - offcanvas-dropdown.js');
            console.log('   - menu-test.js');
            
            console.log('4. Remove any inline menu scripts');
        });
        
        console.log('\n‚úÖ Instructions generated!');
    }

    checkCurrentPage() {
        const currentPage = window.location.pathname.split('/').pop() || 'index.html';
        console.log(`üîç Checking current page: ${currentPage}`);
        
        const hasUnifiedMenuScript = !!document.querySelector('script[src*="unified-menu-system.js"]');
        const hasUnifiedNotificationScript = !!document.querySelector('script[src*="unified-notification-system.js"]');
        const hasMenuContainer = !!document.getElementById('optimizedMenu');
        const hasAdminButton = !!document.querySelector('.btn-dark.btn-sm.position-absolute');
        const hasOldMenuScripts = !!document.querySelector('script[src*="optimized-menu.js"]') || 
                                 !!document.querySelector('script[src*="test-menu.js"]') ||
                                 !!document.querySelector('script[src*="simple-menu.js"]');
        
        console.log('üìä Current Page Menu Status:');
        console.log(`- Page: ${currentPage}`);
        console.log(`- Unified Menu Script: ${hasUnifiedMenuScript ? '‚úÖ' : '‚ùå'}`);
        console.log(`- Unified Notification Script: ${hasUnifiedNotificationScript ? '‚úÖ' : '‚ùå'}`);
        console.log(`- Menu Container: ${hasMenuContainer ? '‚úÖ' : '‚ùå'}`);
        console.log(`- Admin Button: ${hasAdminButton ? '‚úÖ' : '‚ùå'}`);
        console.log(`- Old Menu Scripts: ${hasOldMenuScripts ? '‚ùå' : '‚úÖ'}`);
        
        if (this.pages.includes(currentPage)) {
            if (!hasUnifiedMenuScript || !hasUnifiedNotificationScript || !hasMenuContainer || !hasAdminButton) {
                console.log('‚ö†Ô∏è This page needs to be updated with index.html menu structure');
                this.showUpdateInstructions();
            } else {
                console.log('‚úÖ This page already has the correct menu structure');
            }
        }
        
        return {
            page: currentPage,
            unifiedMenuScript: hasUnifiedMenuScript,
            unifiedNotificationScript: hasUnifiedNotificationScript,
            menuContainer: hasMenuContainer,
            adminButton: hasAdminButton,
            oldMenuScripts: hasOldMenuScripts
        };
    }

    showUpdateInstructions() {
        console.log('\nüîß Manual Update Instructions for this page:');
        console.log('===========================================');
        console.log('1. Replace the entire <header> section with the index.html header');
        console.log('2. Add the required scripts before </body>');
        console.log('3. Remove old menu scripts');
        console.log('4. Test the menu functionality');
        
        // Show the exact header template
        console.log('\nüìã Exact Header Template to Copy:');
        console.log(`
<header id="header">
  <nav class="navbar navbar-expand-lg padding-small px-lg-4">
    <div class="container-fluid">

      <div class="main-logo position-relative">
        <a href="index.html">
          <img src="images/header-icon.png" alt="logo">
        </a>
        <!-- Hidden Admin Button - Triple click to access -->
        <button class="btn btn-dark btn-sm position-absolute" 
                style="top: 5px; right: 5px; opacity: 0.2; transition: opacity 0.3s; z-index: 1000; font-size: 10px;" 
                onmouseover="this.style.opacity='0.6'" 
                onmouseout="this.style.opacity='0.2'"
                onclick="handleAdminButtonClick()"
                title="Admin Access (Triple Click)">
          <i class="fas fa-shield-alt"></i>
        </button>
      </div>

      <button class="navbar-toggler mb-0" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar"
        aria-controls="offcanvasNavbar">
        <img src="images/menu.png" alt="Menu" class="hamburger-menu" style="width: 24px; height: 24px;">
      </button>
      <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasNavbar" aria-labelledby="offcanvasNavbarLabel">
        <div class="offcanvas-header">
          <h5 class="offcanvas-title text-white" id="offcanvasNavbarLabel">Menu</h5>
          <button type="button" class="btn-close btn-close-white text-reset" data-bs-dismiss="offcanvas"
            aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
          <div class="main-menu text-center d-lg-flex align-items-center">
            <ul class="menu-list list-unstyled d-lg-flex m-0" id="optimizedMenu">
              <!-- Menu will be dynamically generated by unified-menu-system.js -->
            </ul>
          </div>
          <div class="btn-wrap d-flex my-4 my-lg-0">
            <!-- Connect button will be added by unified menu system -->
          </div>
        </div>
      </div>

    </div>
  </nav>
</header>`);
        
        console.log('\nüìã Required Scripts to Add:');
        console.log(`
<script src="js/unified-notification-system.js"></script>
<script src="js/unified-menu-system.js"></script>
<script src="js/apply-unified-menu-to-all.js"></script>`);
    }

    // Method to auto-fix current page if possible
    async autoFixCurrentPage() {
        const currentPage = window.location.pathname.split('/').pop() || 'index.html';
        console.log(`üîß Attempting to auto-fix menu for: ${currentPage}`);
        
        if (!this.pages.includes(currentPage)) {
            console.log('‚ö†Ô∏è This page is not in the list of pages to update');
            return false;
        }
        
        // Check if we can add the required scripts
        const hasUnifiedMenuScript = !!document.querySelector('script[src*="unified-menu-system.js"]');
        const hasUnifiedNotificationScript = !!document.querySelector('script[src*="unified-notification-system.js"]');
        
        if (!hasUnifiedMenuScript) {
            console.log('üì• Adding unified-menu-system.js...');
            await this.addScript('js/unified-menu-system.js');
        }
        
        if (!hasUnifiedNotificationScript) {
            console.log('üì• Adding unified-notification-system.js...');
            await this.addScript('js/unified-notification-system.js');
        }
        
        // Check if menu container exists
        const menuContainer = document.getElementById('optimizedMenu');
        if (!menuContainer) {
            console.log('‚ùå Menu container not found, cannot auto-fix header structure');
            this.showUpdateInstructions();
            return false;
        }
        
        console.log('‚úÖ Auto-fix completed for scripts');
        return true;
    }

    async addScript(src) {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = src;
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
        });
    }

    // Method to show all pages that need updating
    showAllPagesStatus() {
        console.log('üìã All Pages Status:');
        console.log('===================');
        
        this.pages.forEach(page => {
            console.log(`üìÑ ${page}: Needs manual update`);
        });
        
        console.log('\nüìÑ index.html: ‚úÖ Already has correct menu');
        console.log('üìÑ swap.html: ‚úÖ Already has correct menu');
        console.log('üìÑ dashboard.html: ‚úÖ Already has correct menu');
        
        console.log('\nüîß Total pages to update: ' + this.pages.length);
    }

    // Method to generate a summary report
    generateReport() {
        const currentPage = window.location.pathname.split('/').pop() || 'index.html';
        const status = this.checkCurrentPage();
        
        console.log('\nüìä Menu Update Report:');
        console.log('=====================');
        console.log(`Current Page: ${currentPage}`);
        console.log(`Status: ${status.unifiedMenuScript && status.unifiedNotificationScript ? '‚úÖ Updated' : '‚ùå Needs Update'}`);
        console.log(`Pages Updated: 3/14 (index.html, swap.html, dashboard.html)`);
        console.log(`Pages Pending: ${this.pages.length}/14`);
        
        if (!status.unifiedMenuScript || !status.unifiedNotificationScript) {
            console.log('\n‚ö†Ô∏è This page needs manual update');
            this.showUpdateInstructions();
        }
        
        return status;
    }
}

// Initialize the applier
const applyIndexMenuToAll = new ApplyIndexMenuToAll();
window.applyIndexMenuToAll = applyIndexMenuToAll;

// Auto-check on page load
document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        applyIndexMenuToAll.checkCurrentPage();
    }, 1000);
});

console.log('üéØ Apply Index Menu to All ready!');
