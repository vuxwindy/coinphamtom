const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/in-app-wallet-calls-DoVweYsf.js","assets/wait-for-tx-receipt-C9zxAqk4.js","assets/index-r-K8bCt4.js","assets/index-BwMRwPhq.css","assets/to-serializable-transaction-BMbNRj8d.js","assets/sleep-mAKpSMLY.js","assets/send-transaction-DRs_bS9h.js","assets/random-Dc3txyW0.js","assets/eth_getTransactionCount-Dy3UYLy3.js","assets/index-V_i5jKWp.js","assets/read-contract-DpACvx2n.js","assets/utils-GbVwyc3t.js","assets/bundler-DmxEBivy.js","assets/addresses-Cbjra2SQ.js","assets/send-eip712-transaction-FYI7wW-w.js","assets/eth_sendRawTransaction-DPdnXbFR.js","assets/concat-hex-C8eryf6L.js"])))=>i.map(i=>d[i]);
import{bp as v,O as d,N as m,as as C,S as g,bq as A,aa as x}from"./index-r-K8bCt4.js";import{s as I}from"./types-CY5aNEio.js";import{p as P,o as E,i as M,j as _}from"./bundler-DmxEBivy.js";import{b as U}from"./to-serializable-transaction-BMbNRj8d.js";import{r as V}from"./random-Dc3txyW0.js";import"./utils-GbVwyc3t.js";const W=v({blockExplorers:[{name:"Etherscan",url:"https://etherscan.io"}],id:1,name:"Ethereum",nativeCurrency:{decimals:18,name:"Ether",symbol:"ETH"}}),R="0x3f707e6b",D=[{components:[{name:"target",type:"address"},{name:"value",type:"uint256"},{name:"data",type:"bytes"}],name:"calls",type:"tuple[]"}],F=[];function N(t){const e=E(async()=>"asyncParams"in t?await t.asyncParams():t);return P({accessList:async()=>(await e()).overrides?.accessList,authorizationList:async()=>(await e()).overrides?.authorizationList,contract:t.contract,erc20Value:async()=>(await e()).overrides?.erc20Value,extraGas:async()=>(await e()).overrides?.extraGas,gas:async()=>(await e()).overrides?.gas,gasPrice:async()=>(await e()).overrides?.gasPrice,maxFeePerGas:async()=>(await e()).overrides?.maxFeePerGas,maxPriorityFeePerGas:async()=>(await e()).overrides?.maxPriorityFeePerGas,method:[R,D,F],nonce:async()=>(await e()).overrides?.nonce,params:async()=>[(await e()).calls],value:async()=>(await e()).overrides?.value})}const S="0xD6999651Fc0964B9c6B444307a0ab20534a66560",O=t=>{const{client:e,adminAccount:n,sponsorGas:s}=t,r=async a=>{const i=a[0];if(!i)throw new Error("No transactions provided");const p=m(i.chainId),u=C({address:n.address,chain:p,client:e,abi:H});let l;if(!await z(u)){let o=i.nonce?BigInt(i.nonce):BigInt(await G({client:e,address:n.address,chain:m(i.chainId)}));o+=s?0n:1n;const c=await n.signAuthorization?.({address:S,chainId:i.chainId,nonce:o});if(!c)throw new Error("Failed to sign authorization");l=c}if(s){const o={calls:a.map(b=>({data:b.data??"0x",target:g(b.to??""),value:b.value??0n})),uid:V()},c=await n.signTypedData({domain:{chainId:i.chainId,name:"MinimalAccount",verifyingContract:u.address,version:"1"},message:o,primaryType:"WrappedCalls",types:{Call:[{name:"target",type:"address"},{name:"value",type:"uint256"},{name:"data",type:"bytes"}],WrappedCalls:[{name:"calls",type:"Call[]"},{name:"uid",type:"bytes32"}]}}),w=await M({authorization:l,eoaAddress:g(n.address),options:{chain:m(i.chainId),client:e},signature:c,wrappedCalls:o});return{transactionHash:await B({options:{chain:m(i.chainId),client:e},transactionId:w.transactionId})}}const T=N({calls:a.map(o=>({data:o.data??"0x",target:o.to??"",value:o.value??0n})),contract:u,overrides:{authorizationList:l?[l]:void 0,value:a.reduce((o,c)=>o+(c.value??0n),0n)}}),L=await U({from:n.address,transaction:T});return n.sendTransaction(L)},y={address:n.address,sendBatchTransaction:async a=>r(a),sendTransaction:async a=>r([a]),signMessage:({message:a,originalMessage:i,chainId:p})=>n.signMessage({chainId:p,message:a,originalMessage:i}),signTypedData:a=>n.signTypedData(a),sendCalls:async a=>{const{inAppWalletSendCalls:i}=await d(async()=>{const{inAppWalletSendCalls:T}=await import("./in-app-wallet-calls-DoVweYsf.js");return{inAppWalletSendCalls:T}},__vite__mapDeps([0,1,2,3,4,5,6,7])),p=a.calls[0];if(!p)throw new Error("No calls to send");const u=p.client,l=p.chain||a.chain,h=await i({account:y,calls:a.calls});return{chain:l,client:u,id:h}},getCallsStatus:async a=>{const{inAppWalletGetCallsStatus:i}=await d(async()=>{const{inAppWalletGetCallsStatus:p}=await import("./in-app-wallet-calls-DoVweYsf.js");return{inAppWalletGetCallsStatus:p}},__vite__mapDeps([0,1,2,3,4,5,6,7]));return i(a)},getCapabilities:async a=>({[a.chainId??1]:{atomic:{status:"supported"},paymasterService:{supported:s??!1}}})};return y};async function G(t){const{client:e,address:n,chain:s}=t,r=x({chain:s,client:e});return await d(async()=>{const{eth_getTransactionCount:a}=await import("./eth_getTransactionCount-Dy3UYLy3.js");return{eth_getTransactionCount:a}},__vite__mapDeps([8,2,3])).then(({eth_getTransactionCount:a})=>a(r,{address:n,blockTag:"pending"}))}async function z(t){const e=await A(t),n=e.length>0&&e.startsWith("0xef0100"),s=`0x${e.slice(8,48)}`;return n&&s.toLowerCase()===S.toLowerCase()}async function B(t){const e=t.timeoutMs||3e5,n=t.intervalMs||1e3,s=Date.now()+e;for(;Date.now()<s;){const r=await _({options:t.options,transactionId:t.transactionId});if(r.transactionHash)return r.transactionHash;await new Promise(y=>setTimeout(y,n))}throw new Error(`Timeout waiting for transaction to be mined on chain ${t.options.chain.id} with transactionId: ${t.transactionId}`)}const H=[{type:"receive",stateMutability:"payable"},{type:"function",name:"createSessionWithSig",inputs:[{name:"sessionSpec",type:"tuple",internalType:"struct SessionLib.SessionSpec",components:[{name:"signer",type:"address",internalType:"address"},{name:"isWildcard",type:"bool",internalType:"bool"},{name:"expiresAt",type:"uint256",internalType:"uint256"},{name:"callPolicies",type:"tuple[]",internalType:"struct SessionLib.CallSpec[]",components:[{name:"target",type:"address",internalType:"address"},{name:"selector",type:"bytes4",internalType:"bytes4"},{name:"maxValuePerUse",type:"uint256",internalType:"uint256"},{name:"valueLimit",type:"tuple",internalType:"struct SessionLib.UsageLimit",components:[{name:"limitType",type:"uint8",internalType:"enum SessionLib.LimitType"},{name:"limit",type:"uint256",internalType:"uint256"},{name:"period",type:"uint256",internalType:"uint256"}]},{name:"constraints",type:"tuple[]",internalType:"struct SessionLib.Constraint[]",components:[{name:"condition",type:"uint8",internalType:"enum SessionLib.Condition"},{name:"index",type:"uint64",internalType:"uint64"},{name:"refValue",type:"bytes32",internalType:"bytes32"},{name:"limit",type:"tuple",internalType:"struct SessionLib.UsageLimit",components:[{name:"limitType",type:"uint8",internalType:"enum SessionLib.LimitType"},{name:"limit",type:"uint256",internalType:"uint256"},{name:"period",type:"uint256",internalType:"uint256"}]}]}]},{name:"transferPolicies",type:"tuple[]",internalType:"struct SessionLib.TransferSpec[]",components:[{name:"target",type:"address",internalType:"address"},{name:"maxValuePerUse",type:"uint256",internalType:"uint256"},{name:"valueLimit",type:"tuple",internalType:"struct SessionLib.UsageLimit",components:[{name:"limitType",type:"uint8",internalType:"enum SessionLib.LimitType"},{name:"limit",type:"uint256",internalType:"uint256"},{name:"period",type:"uint256",internalType:"uint256"}]}]},{name:"uid",type:"bytes32",internalType:"bytes32"}]},{name:"signature",type:"bytes",internalType:"bytes"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"eip712Domain",inputs:[],outputs:[{name:"fields",type:"bytes1",internalType:"bytes1"},{name:"name",type:"string",internalType:"string"},{name:"version",type:"string",internalType:"string"},{name:"chainId",type:"uint256",internalType:"uint256"},{name:"verifyingContract",type:"address",internalType:"address"},{name:"salt",type:"bytes32",internalType:"bytes32"},{name:"extensions",type:"uint256[]",internalType:"uint256[]"}],stateMutability:"view"},{type:"function",name:"execute",inputs:[{name:"calls",type:"tuple[]",internalType:"struct Call[]",components:[{name:"target",type:"address",internalType:"address"},{name:"value",type:"uint256",internalType:"uint256"},{name:"data",type:"bytes",internalType:"bytes"}]}],outputs:[],stateMutability:"payable"},{type:"function",name:"executeWithSig",inputs:[{name:"wrappedCalls",type:"tuple",internalType:"struct WrappedCalls",components:[{name:"calls",type:"tuple[]",internalType:"struct Call[]",components:[{name:"target",type:"address",internalType:"address"},{name:"value",type:"uint256",internalType:"uint256"},{name:"data",type:"bytes",internalType:"bytes"}]},{name:"uid",type:"bytes32",internalType:"bytes32"}]},{name:"signature",type:"bytes",internalType:"bytes"}],outputs:[],stateMutability:"payable"},{type:"function",name:"getCallPoliciesForSigner",inputs:[{name:"signer",type:"address",internalType:"address"}],outputs:[{name:"",type:"tuple[]",internalType:"struct SessionLib.CallSpec[]",components:[{name:"target",type:"address",internalType:"address"},{name:"selector",type:"bytes4",internalType:"bytes4"},{name:"maxValuePerUse",type:"uint256",internalType:"uint256"},{name:"valueLimit",type:"tuple",internalType:"struct SessionLib.UsageLimit",components:[{name:"limitType",type:"uint8",internalType:"enum SessionLib.LimitType"},{name:"limit",type:"uint256",internalType:"uint256"},{name:"period",type:"uint256",internalType:"uint256"}]},{name:"constraints",type:"tuple[]",internalType:"struct SessionLib.Constraint[]",components:[{name:"condition",type:"uint8",internalType:"enum SessionLib.Condition"},{name:"index",type:"uint64",internalType:"uint64"},{name:"refValue",type:"bytes32",internalType:"bytes32"},{name:"limit",type:"tuple",internalType:"struct SessionLib.UsageLimit",components:[{name:"limitType",type:"uint8",internalType:"enum SessionLib.LimitType"},{name:"limit",type:"uint256",internalType:"uint256"},{name:"period",type:"uint256",internalType:"uint256"}]}]}]}],stateMutability:"view"},{type:"function",name:"getSessionExpirationForSigner",inputs:[{name:"signer",type:"address",internalType:"address"}],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"getSessionStateForSigner",inputs:[{name:"signer",type:"address",internalType:"address"}],outputs:[{name:"",type:"tuple",internalType:"struct SessionLib.SessionState",components:[{name:"transferValue",type:"tuple[]",internalType:"struct SessionLib.LimitState[]",components:[{name:"remaining",type:"uint256",internalType:"uint256"},{name:"target",type:"address",internalType:"address"},{name:"selector",type:"bytes4",internalType:"bytes4"},{name:"index",type:"uint256",internalType:"uint256"}]},{name:"callValue",type:"tuple[]",internalType:"struct SessionLib.LimitState[]",components:[{name:"remaining",type:"uint256",internalType:"uint256"},{name:"target",type:"address",internalType:"address"},{name:"selector",type:"bytes4",internalType:"bytes4"},{name:"index",type:"uint256",internalType:"uint256"}]},{name:"callParams",type:"tuple[]",internalType:"struct SessionLib.LimitState[]",components:[{name:"remaining",type:"uint256",internalType:"uint256"},{name:"target",type:"address",internalType:"address"},{name:"selector",type:"bytes4",internalType:"bytes4"},{name:"index",type:"uint256",internalType:"uint256"}]}]}],stateMutability:"view"},{type:"function",name:"getTransferPoliciesForSigner",inputs:[{name:"signer",type:"address",internalType:"address"}],outputs:[{name:"",type:"tuple[]",internalType:"struct SessionLib.TransferSpec[]",components:[{name:"target",type:"address",internalType:"address"},{name:"maxValuePerUse",type:"uint256",internalType:"uint256"},{name:"valueLimit",type:"tuple",internalType:"struct SessionLib.UsageLimit",components:[{name:"limitType",type:"uint8",internalType:"enum SessionLib.LimitType"},{name:"limit",type:"uint256",internalType:"uint256"},{name:"period",type:"uint256",internalType:"uint256"}]}]}],stateMutability:"view"},{type:"function",name:"isWildcardSigner",inputs:[{name:"signer",type:"address",internalType:"address"}],outputs:[{name:"",type:"bool",internalType:"bool"}],stateMutability:"view"},{type:"function",name:"onERC1155BatchReceived",inputs:[{name:"",type:"address",internalType:"address"},{name:"",type:"address",internalType:"address"},{name:"",type:"uint256[]",internalType:"uint256[]"},{name:"",type:"uint256[]",internalType:"uint256[]"},{name:"",type:"bytes",internalType:"bytes"}],outputs:[{name:"",type:"bytes4",internalType:"bytes4"}],stateMutability:"nonpayable"},{type:"function",name:"onERC1155Received",inputs:[{name:"",type:"address",internalType:"address"},{name:"",type:"address",internalType:"address"},{name:"",type:"uint256",internalType:"uint256"},{name:"",type:"uint256",internalType:"uint256"},{name:"",type:"bytes",internalType:"bytes"}],outputs:[{name:"",type:"bytes4",internalType:"bytes4"}],stateMutability:"nonpayable"},{type:"function",name:"onERC721Received",inputs:[{name:"",type:"address",internalType:"address"},{name:"",type:"address",internalType:"address"},{name:"",type:"uint256",internalType:"uint256"},{name:"",type:"bytes",internalType:"bytes"}],outputs:[{name:"",type:"bytes4",internalType:"bytes4"}],stateMutability:"nonpayable"},{type:"function",name:"supportsInterface",inputs:[{name:"interfaceId",type:"bytes4",internalType:"bytes4"}],outputs:[{name:"",type:"bool",internalType:"bool"}],stateMutability:"view"},{type:"event",name:"Executed",inputs:[{name:"to",type:"address",indexed:!0,internalType:"address"},{name:"value",type:"uint256",indexed:!1,internalType:"uint256"},{name:"data",type:"bytes",indexed:!1,internalType:"bytes"}],anonymous:!1},{type:"event",name:"SessionCreated",inputs:[{name:"signer",type:"address",indexed:!0,internalType:"address"},{name:"sessionSpec",type:"tuple",indexed:!1,internalType:"struct SessionLib.SessionSpec",components:[{name:"signer",type:"address",internalType:"address"},{name:"isWildcard",type:"bool",internalType:"bool"},{name:"expiresAt",type:"uint256",internalType:"uint256"},{name:"callPolicies",type:"tuple[]",internalType:"struct SessionLib.CallSpec[]",components:[{name:"target",type:"address",internalType:"address"},{name:"selector",type:"bytes4",internalType:"bytes4"},{name:"maxValuePerUse",type:"uint256",internalType:"uint256"},{name:"valueLimit",type:"tuple",internalType:"struct SessionLib.UsageLimit",components:[{name:"limitType",type:"uint8",internalType:"enum SessionLib.LimitType"},{name:"limit",type:"uint256",internalType:"uint256"},{name:"period",type:"uint256",internalType:"uint256"}]},{name:"constraints",type:"tuple[]",internalType:"struct SessionLib.Constraint[]",components:[{name:"condition",type:"uint8",internalType:"enum SessionLib.Condition"},{name:"index",type:"uint64",internalType:"uint64"},{name:"refValue",type:"bytes32",internalType:"bytes32"},{name:"limit",type:"tuple",internalType:"struct SessionLib.UsageLimit",components:[{name:"limitType",type:"uint8",internalType:"enum SessionLib.LimitType"},{name:"limit",type:"uint256",internalType:"uint256"},{name:"period",type:"uint256",internalType:"uint256"}]}]}]},{name:"transferPolicies",type:"tuple[]",internalType:"struct SessionLib.TransferSpec[]",components:[{name:"target",type:"address",internalType:"address"},{name:"maxValuePerUse",type:"uint256",internalType:"uint256"},{name:"valueLimit",type:"tuple",internalType:"struct SessionLib.UsageLimit",components:[{name:"limitType",type:"uint8",internalType:"enum SessionLib.LimitType"},{name:"limit",type:"uint256",internalType:"uint256"},{name:"period",type:"uint256",internalType:"uint256"}]}]},{name:"uid",type:"bytes32",internalType:"bytes32"}]}],anonymous:!1},{type:"event",name:"ValueReceived",inputs:[{name:"from",type:"address",indexed:!0,internalType:"address"},{name:"value",type:"uint256",indexed:!1,internalType:"uint256"}],anonymous:!1},{type:"error",name:"AllowanceExceeded",inputs:[{name:"allowanceUsage",type:"uint256",internalType:"uint256"},{name:"limit",type:"uint256",internalType:"uint256"},{name:"period",type:"uint64",internalType:"uint64"}]},{type:"error",name:"CallPolicyViolated",inputs:[{name:"target",type:"address",internalType:"address"},{name:"selector",type:"bytes4",internalType:"bytes4"}]},{type:"error",name:"CallReverted",inputs:[]},{type:"error",name:"ConditionFailed",inputs:[{name:"param",type:"bytes32",internalType:"bytes32"},{name:"refValue",type:"bytes32",internalType:"bytes32"},{name:"condition",type:"uint8",internalType:"uint8"}]},{type:"error",name:"InvalidDataLength",inputs:[{name:"actualLength",type:"uint256",internalType:"uint256"},{name:"expectedLength",type:"uint256",internalType:"uint256"}]},{type:"error",name:"InvalidSignature",inputs:[{name:"msgSender",type:"address",internalType:"address"},{name:"thisAddress",type:"address",internalType:"address"}]},{type:"error",name:"LifetimeUsageExceeded",inputs:[{name:"lifetimeUsage",type:"uint256",internalType:"uint256"},{name:"limit",type:"uint256",internalType:"uint256"}]},{type:"error",name:"MaxValueExceeded",inputs:[{name:"value",type:"uint256",internalType:"uint256"},{name:"maxValuePerUse",type:"uint256",internalType:"uint256"}]},{type:"error",name:"NoCallsToExecute",inputs:[]},{type:"error",name:"SessionExpired",inputs:[]},{type:"error",name:"SessionExpiresTooSoon",inputs:[]},{type:"error",name:"SessionZeroSigner",inputs:[]},{type:"error",name:"TransferPolicyViolated",inputs:[{name:"target",type:"address",internalType:"address"}]},{type:"error",name:"UIDAlreadyProcessed",inputs:[]}];async function Y(t,e,n){if(e?.auth?.mode!=="popup"&&e?.auth?.mode!==void 0&&n.authenticateWithRedirect){const y=t.strategy;I.includes(y)&&await n.authenticateWithRedirect(y,e?.auth?.mode,e?.auth?.redirectUrl)}const r=(await n.connect(t)).user.account;return f({authAccount:r,client:t.client,createOptions:e,desiredChain:t.chain})}async function ee(t,e,n){t.authResult&&n.loginWithAuthToken&&await n.loginWithAuthToken(t.authResult);const s=await q(n);if(!s)throw new Error("Failed to authenticate user.");const r=s.account;return f({authAccount:r,client:t.client,createOptions:e,desiredChain:t.chain})}async function k(t){const{connectSmartAccount:e}=await d(async()=>{const{connectSmartAccount:n}=await import("./index-V_i5jKWp.js").then(s=>s.i);return{connectSmartAccount:n}},__vite__mapDeps([9,2,3,10,11,4,12,13,14,15,16,7,6]));return e({chain:t.chain,client:t.client,personalAccount:t.authAccount},t.smartAccountOptions)}async function q(t){const e=await t.getUser();switch(e.status){case"Logged In, Wallet Initialized":return e}}async function f(t){const{createOptions:e,authAccount:n,desiredChain:s,client:r}=t;let y,a;const i=e&&"executionMode"in e?e.executionMode:void 0;if(i&&(i.mode==="EIP4337"?y=i.smartAccount:i.mode==="EIP7702"&&(a=i)),e&&"smartAccount"in e&&e?.smartAccount&&(y=e.smartAccount),y){const[p,u]=await k({authAccount:n,chain:s,client:r,smartAccountOptions:y});return{account:p,adminAccount:n,chain:u}}if(a){const p=s;if(!p)throw new Error("Chain is required for EIP-7702 execution, pass a chain when connecting the inAppWallet.");return{account:O({adminAccount:n,client:r,sponsorGas:a.sponsorGas}),adminAccount:n,chain:p}}return{account:n,chain:s||W}}export{ee as autoConnectInAppWallet,Y as connectInAppWallet};
